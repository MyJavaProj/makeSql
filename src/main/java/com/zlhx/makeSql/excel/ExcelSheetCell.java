package com.zlhx.makeSql.excel;import java.util.List;import org.apache.poi.hssf.usermodel.HSSFCell;import org.apache.poi.hssf.usermodel.HSSFCellStyle;import org.apache.poi.hssf.usermodel.HSSFRichTextString;import org.apache.poi.hssf.usermodel.HSSFRow;/** * Excel Cell工具类  * @author liuxue * @date 2013-6-8 */class ExcelSheetCell {             /**      * 用于产生当前excel标题 `     * @param sheet [当前工作表单]      * @param firstRowValue [标题数组]      * @param style [当前单元格风格]      */      public static HSSFRow createCurrRowTitle(ExcelWorkBook work ,String[] firstRowValue,HSSFCellStyle style) {      	HSSFRow row = ExcelSheetRow.createCurrSheetTitle(work);    	HSSFCell cell = null;        for (int i = 0; i < firstRowValue.length; i++) {              cell = row.createCell((short) i);              cell.setCellStyle(style);             //cell.setEncoding(HSSFCell.ENCODING_UTF_16);              cell.setCellValue(new HSSFRichTextString(firstRowValue[i].toString()));          }        return row;    }            /**      * 用于生成excel当前记录内容,标题除外      * @param sheet [当前工作表单]      * @param beanList [当前数据列表,i=Object[]]      * @param style [当前单元格风格]      */      public static void createCurrRowRecord(ExcelWorkBook work,List<Object[]> beanList,HSSFCellStyle style) {          Object[] obj = null;          for (int i = 0; i < beanList.size(); i++) {          	HSSFRow row = ExcelSheetRow.createCurrSheetRecord(work,i);            obj = (Object[]) beanList.get(i);              if (obj != null) {                  createExcelCell(row, obj,style,null);              }          }      }            /**      * 需要以数组的方式提供当前每条记录      * 通过数组自动判断有多少列,生成当前行      */      private static void createExcelCell(HSSFRow row, Object[] obj,HSSFCellStyle style,String pattern) {     	if(null == pattern || "".equals(pattern)) pattern = "yyyy-MM-dd";        try {              for (int i = 0; i < obj.length; i++) {                  try {                  	if (obj[i] == null) obj[i] = "";                    	Object value = obj[i];                    	HSSFCell cell = row.createCell((short) i);                          cell.setCellStyle(style);                        //cell.setEncoding(HSSFCell.ENCODING_UTF_16);                        HSSFRichTextString richString = new HSSFRichTextString(value.toString());	                    cell.setCellValue(richString);                        /*String textValue = null;    	                if (value instanceof Integer) {    		                int intValue = (Integer) value;    		                cell.setCellValue(intValue);						} else if (value instanceof Float) {							float fValue = (Float) value;							cell.setCellValue(String.valueOf(fValue));						} 						else if (value instanceof Double) {							double dValue = (Double) value;							textValue = new HSSFRichTextString(String.valueOf(dValue)).toString();							cell.setCellValue(textValue);						} else if (value instanceof Long) {							long longValue = (Long) value;							cell.setCellValue(longValue);						}    		            if (value instanceof Boolean) {		                   	boolean bValue = (Boolean) value;		                   textValue = "男";		                   if (!bValue) {textValue ="女";}		                } else if (value instanceof Date) {		                   Date date = (Date) value;		                   SimpleDateFormat sdf = new SimpleDateFormat(pattern);		                   textValue = sdf.format(date);		                }  else if (value instanceof byte[]) {		                	// 有图片时，设置行高为60px;//		                   row.setHeightInPoints(60);//		                   // 设置图片所在列宽度为80px,注意这里单位的一个换算//		                   sheet.setColumnWidth(i, (short) (35.7 * 80));//		                   // sheet.autoSizeColumn(i);//		                   byte[] bsValue = (byte[]) value;//		                   HSSFClientAnchor anchor = new HSSFClientAnchor(0, 0,1023, 255, (short) 6, index, (short) 6, index);//		                   anchor.setAnchorType(2);//		                   patriarch.createPicture(anchor, workbook.addPicture(bsValue, HSSFWorkbook.PICTURE_TYPE_JPEG));		                } else if(value instanceof String){		                   //其它数据类型都当作字符串简单处理		                   textValue = value.toString();		                }    		          //如果不是图片数据，就利用正则表达式判断textValue是否全部由数字组成    	                if(textValue!=null){    	                   Pattern p = Pattern.compile("^//d+(//.//d+)?$");      	                   Matcher matcher = p.matcher(textValue);    	                   if(matcher.matches()){    	                      //是数字当作double处理    	                      cell.setCellValue(Double.parseDouble(textValue));    	                   }else{    	                      HSSFRichTextString richString = new HSSFRichTextString(textValue);    	                      cell.setCellValue(richString);    	                   }    	                }*/                                      } catch (NullPointerException e) {                      continue;                  }                }          } catch (Exception ex) {              System.out.print(ex);          }      }  }